@model IPagedList<WebTimNguoiThatLac.Models.TimNguoi>
@using X.PagedList;
@using X.PagedList.Mvc.Core;

@{
    ViewData["Title"] = "Danh Sách Thất Lạc";
}


<!-- end Select2 CSS -->

<style>
    /* Main container */
    .search-container {
        background-color: #f8f9fa;
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        padding: 25px;
        margin-bottom: 30px;
    }

    /* Search form elements */
    .search-form .form-group {
        margin-bottom: 1.2rem;
    }

    .search-form label {
        font-weight: 600;
        color: #495057;
        margin-bottom: 0.5rem;
    }

    .search-form .form-control {
        border-radius: 8px;
        padding: 10px 15px;
        border: 1px solid #ced4da;
        transition: all 0.3s;
    }

        .search-form .form-control:focus {
            border-color: #80bdff;
            box-shadow: 0 0 0 0.2rem rgba(0,123,255,0.25);
        }

    /* Search buttons */
    .btn-search {
        background-color: #28a745;
        color: white;
        border-radius: 8px;
        padding: 10px 20px;
        font-weight: 600;
        transition: all 0.3s;
    }

        .btn-search:hover {
            background-color: #218838;
            transform: translateY(-2px);
        }

    .btn-reset {
        background-color: #6c757d;
        color: white;
        border-radius: 8px;
        padding: 10px 20px;
        font-weight: 600;
        transition: all 0.3s;
    }

        .btn-reset:hover {
            background-color: #5a6268;
            transform: translateY(-2px);
        }

    /* Result cards */
    .person-card {
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 6px 15px rgba(0,0,0,0.1);
        
        cursor: pointer;
        transition: all 0.3s ease;
        transition: all 0.3s ease;
        margin-bottom: 25px;
        border: none;

        height: 100%;
        display: flex;
        flex-direction: column;
    }

        .person-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 20px rgba(0,0,0,0.15);
        }

        .person-card .card-img-top,
        .person-card .bg-light {
            height: 250px;
            object-fit: cover;
            width: 100%;
        }

        .person-card .card-body {
            padding: 20px;
            
            flex: 1;
            display: flex;
            flex-direction: column;
            padding: 1.25rem;
        }

        .person-card .card-title {
            font-weight: 700;
            color: #343a40;
            margin-bottom: 15px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 100%;
            line-height: 1.2;
        }

        .person-card .card-text {
            color: #6c757d;
            margin-bottom: 5px;
        }

        .person-card .status-badge {
            position: absolute;
            top: 15px;
            right: 15px;
            padding: 5px 10px;
            border-radius: 20px;
            font-weight: 600;
            font-size: 0.8rem;
        }
        /* Thêm tooltip để hiện đầy đủ nội dung khi hover */
        .person-card .card-title:hover {
            position: relative;
        }

        .person-card .card-title[title]:hover:after {
            content: attr(title);
            position: absolute;
            left: 0;
            top: 100%;
            z-index: 1000;
            background-color: rgba(0,0,0,0.8);
            color: white;
            padding: 5px 10px;
            border-radius: 4px;
            font-size: 14px;
            white-space: normal;
            max-width: 300px;
        }
        .person-card .location-text {
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
            min-height: 48px;
            position: relative;
        }

        .person-card .location-text:hover::after {
            content: attr(data-full-text);
            position: absolute;
            left: 0;
            top: 100%;
            background-color: rgba(0,0,0,0.8);
            color: white;
            padding: 8px 12px;
            border-radius: 4px;
            font-size: 14px;
            z-index: 1000;
            white-space: normal;
            max-width: 300px;
        }
    .status-searching {
        background-color: #ffc107;
        color: #212529;
    }

    .status-found {
        background-color: #28a745;
        color: white;
    }

    .tag-container {
        margin-top: 10px;
        margin-bottom: 15px;
        white-space: nowrap;
        overflow: hidden;
        position: relative;
    }

    .tag-container:after {
        content: '...';
        position: absolute;
        right: 0;
        background: white;
        padding-left: 5px;
    }

    .tag-container:hover {
        white-space: normal;
        overflow: visible;
    }

    .tag-container:hover:after {
        display: none;
    }

    .tag {
        display: inline-block;
        background-color: #e9ecef;
        color: #495057;
        padding: 4px 10px;
        margin: 0 5px 5px 0;
        border-radius: 20px;
        font-size: 0.8rem;
        transition: all 0.2s;
    }

        .tag:hover {
            background-color: #dee2e6;
            transform: translateY(-1px);
        }

    .tag-highlight {
        background-color: #fff3cd;
        color: #856404;
        font-weight: 600;
    }

    /* Pagination */
    .pagination-container {
        margin-top: 30px;
    }

    .page-item .page-link {
        border-radius: 8px !important;
        margin: 0 3px;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        border: 1px solid #dee2e6;
        color: #495057;
        font-weight: 600;
    }

    .page-item.active .page-link {
        background-color: #ff8f00;
        border-color: #ff8f00;
        color: white;
    }

    .page-item:not(.active) .page-link:hover {
        background-color: #e9ecef;
        color: #ff8f00;
    }

    /* Empty state */
    .empty-state {
        text-align: center;
        padding: 50px 20px;
    }

        .empty-state i {
            font-size: 4rem;
            color: #6c757d;
            margin-bottom: 20px;
        }

        .empty-state h4 {
            color: #343a40;
            margin-bottom: 15px;
        }

    /* Responsive */
    @@media (max-width: 768px) {
        .search-form .form-group {
            margin-bottom: 1rem;
        }

        .person-card {
            margin-bottom: 20px;
        }
    }

    .notification {
        padding: 15px 20px;
        margin-bottom: 10px;
        border-radius: 5px;
        color: white;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        animation: slideIn 0.3s, fadeOut 0.5s 4.5s;
        transition: all 0.3s;
    }

        .notification.success {
            background-color: #28a745;
        }

        .notification.error {
            background-color: #dc3545;
        }

        .notification.warning {
            background-color: #ffc107;
            color: #212529;
        }

        .notification.info {
            background-color: #17a2b8;
        }

    @@keyframes slideIn {
        from {
            transform: translateX(100%);
        }

        to {
            transform: translateX(0);
        }
    }

    @@keyframes fadeOut {
        from {
            opacity: 1;
        }

        to {
            opacity: 0;
        }
    }
    .search-form .form-floating label {
        padding-left: 2.5rem;
    }

    .search-form .form-floating > .form-control ~ label::after,
    .search-form .form-floating > .form-select ~ label::after {
        background-color: transparent !important;
    }

    .search-form .form-floating > .form-control:not(:placeholder-shown) ~ label,
    .search-form .form-floating > .form-select ~ label {
        opacity: 1;
        transform: scale(0.85) translateY(-1.2rem) translateX(0.5rem);
    }

    .search-form .form-text {
        margin-top: 0.25rem;
        margin-left: 0.5rem;
    }

    .card-header i.fs-4 {
        width: 24px;
        text-align: center;
    }

    
</style>

<!-- Thêm vào phần đầu trang -->
<div id="notification-area" style="position: fixed; top: 20px; right: 20px; z-index: 9999;"></div>
<!-- Search Section - Redesigned -->
<div class="container my-4">
    <div class="card shadow-sm border-0">
        <div class="card-header bg-primary text-white py-3">
            <div class="d-flex align-items-center">
                <i class="fas fa-search me-3 fs-4"></i>
                <h4 class="mb-0">Tìm kiếm người thất lạc</h4>
            </div>
        </div>

        <div class="card-body">
            <form asp-action="Index" method="get" class="search-form">
                <div class="row g-3">
                    <!-- Tên/Tiêu đề -->
                    <div class="col-md-12">
                        <div class="form-floating">
                            <input type="text" name="ten" class="form-control"
                            id="ten" placeholder="Nhập tên hoặc tiêu đề"
                            value="@ViewBag.TenFilter">
                            <label for="ten">
                                <i class="fas fa-user-tag me-2 text-muted"></i>Tên hoặc tiêu đề
                            </label>
                        </div>
                    </div>
                    <!-- Tỉnh thành/ Quận huỵen -->
                    <div class="col-md-6 mb-3">
                        <label for="TinhThanhInput" class="form-label fw-bold text-primary">Tỉnh/Thành</label>

                        <input type="text"
                                        id="TinhThanhInput"
                                        class="form-control"
                                        list="ListTinhThanh"
                                        placeholder="Nhập hoặc chọn tỉnh..."
                                        value="@ViewBag.SelectedNameTinhThanh"
                                        oninput="handleTinhThanhChange(this.value)" />

                        <datalist id="ListTinhThanh">
                            @foreach (var tinh in ViewBag.TinhThanhList as List<WebTimNguoiThatLac.Models.TinhThanh>)
                            {

                                <option value="@tinh.TenTinhThanh" selected="@(ViewBag.SelectedTinhThanh == tinh.Id ? "selected" : null)" data-id="@tinh.Id"></option>
                            }
                        </datalist>

                        <!-- Input hidden để chứa ID thực -->
                        <input type="hidden" name="tinhThanhId" id="TinhThanhId" value="@ViewBag.SelectedTinhThanh" />
                    </div>

                    <div class="col-md-6 mb-3">
                        <label for="QuanHuyenInput" class="form-label fw-bold text-primary">Quận/Huyện</label>
                        <input type="text"
                               id="QuanHuyenInput"
                               name="quanHuyenName"
                               class="form-control"
                               list="ListQuanHuyen"
                               placeholder="Nhập hoặc chọn quận/huyện..."
                               value="@ViewBag.SelectedNameQuanHuyen" />
                        <datalist id="ListQuanHuyen">
                            @if (ViewBag.QuanHuyenList != null && ViewBag.SelectedTinhThanh != null)
                            {
                                foreach (var huyen in ((List<WebTimNguoiThatLac.Models.QuanHuyen>)ViewBag.QuanHuyenList)
                                .Where(q => q.IdTinhThanh == ViewBag.SelectedTinhThanh))
                                {
                                    <option value="@huyen.TenQuanHuyen" data-id="@huyen.Id"></option>
                                }
                            }
                        </datalist>
                        <input type="hidden" name="quanHuyenId" id="QuanHuyenId" value="@ViewBag.SelectedQuanHuyen" />
                    </div>

                    <!-- Đặc điểm nhận dạng -->
                    <div class="col-md-12">
                        <div class="form-floating">
                            <input type="text" name="dacDiem" class="form-control"
                            id="dacDiem"
                            placeholder="Ví dụ: sẹo mắt trái, nốt ruồi má phải, áo đỏ"
                            value="@ViewBag.DacDiemFilter">
                            <label for="dacDiem">
                                <i class="fas fa-id-card me-2 text-muted"></i>Đặc điểm nhận dạng
                            </label>
                            <div class="form-text ps-4">
                                <small><i class="fas fa-info-circle me-1 text-primary"></i>Nhập các đặc điểm cách nhau bằng dấu phẩy</small>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Action Buttons -->
                <div class="row mt-4">
                    <div class="col-6 d-flex justify-content-start gap-2 flex-wrap">
                        <button type="submit" class="btn btn-primary px-4 py-2">
                            <i class="fas fa-search me-2"></i> Tìm kiếm
                        </button>
                        <a asp-action="Index" class="btn btn-outline-secondary px-4 py-2">
                            <i class="fas fa-undo me-2"></i> Đặt lại
                        </a>
                    </div>
                    <div class="col-6 d-flex justify-content-end gap-2 flex-wrap">
                        <a asp-action="TimKiemNangCao" class="btn btn-primary px-4 py-2">
                            <i class="fas fa-sliders-h me-2"></i> Nâng cao
                        </a>
                        <a asp-action="TimKiemBangHinhAnh" class="btn btn-primary px-4 py-2">
                            <i class="fa-solid fa-image-portrait"></i> Hình ảnh
                        </a>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>


<!-- Results Section -->
<div class="container">
    @if (Model != null && Model.Any())
    {
        <div class="row">
            @foreach (var item in Model)
            {
                var mainImage = item.AnhTimNguois?.FirstOrDefault(z => z.IdNguoiCanTim == item.Id && z.TrangThai == 1);
                var dacDiemFilter = ViewBag.DacDiemFilter as string;
                var dacDiemItems = item.DaciemNhanDang?.Split(new[] { ',', ';' }, StringSplitOptions.RemoveEmptyEntries)
                .Select(x => x.Trim())
                .Where(x => !string.IsNullOrWhiteSpace(x))
                .ToList();

                <div class="col-lg-4 col-md-6 mb-4">
                    <a href="@Url.Action("ChiTietBaiTimNguoi", "TimNguoi", new { id = item.Id })" class="text-decoration-none">
                        <div class="card person-card h-100">
                            @if (mainImage != null)
                            {
                                <img src="@mainImage.HinhAnh" class="card-img-top" alt="@item.HoTen">
                            }
                            else
                            {
                                <div class="card-img-top bg-light d-flex align-items-center justify-content-center" style="height:250px;">
                                    <i class="fas fa-user-slash fa-4x text-secondary"></i>
                                </div>
                            }

                            <div class="card-body">
                                <span class="status-badge @(item.TrangThai == "Đã tìm thấy" ? "status-found" : "status-searching")">
                                    @item.TrangThai
                                </span>

                                <h5 class="card-title" title="@item.TieuDe">@item.TieuDe</h5>
                                <p class="card-text"><strong>Họ tên:</strong> @item.HoTen</p>

                                @{
                                    string s = "";
                                    int d = 0;
                                    if (item.IdTinhThanh != null)
                                    {
                                        s = s + item.TinhThanh.TenTinhThanh;
                                        d++;
                                    }
                                    if (item.IdQuanHuyen != null)
                                    {
                                        s = s + (d == 0 ? "" : ", ") + item.QuanHuyen.TenQuanHuyen;
                                        d++;
                                    }

                                    if (!string.IsNullOrEmpty(item.KhuVuc))
                                    {
                                        s = s + (d == 0 ? "" : ", ") + item.KhuVuc;
                                    }

                                    if (d == 0)
                                    {
                                        s = "Chưa xác định";
                                    }
                                }
                                <p class="card-text location-text" data-full-text="@s">
                                    <strong>Khu vực:</strong> @s
                                </p>
                                <p class="card-text"><strong>Ngày đăng:</strong> @item.NgayDang.ToString("dd/MM/yyyy")</p>

                                @if (dacDiemItems != null && dacDiemItems.Any())
                                {
                                    <div class="tag-container" title="@string.Join(", ", dacDiemItems)">
                                        <strong>Đặc điểm:</strong><br>
                                        @foreach (var tag in dacDiemItems)
                                        {
                                            var isHighlight = !string.IsNullOrEmpty(dacDiemFilter) &&
                                            dacDiemFilter.Split(',')
                                            .Select(x => x.Trim())
                                            .Any(keyword => tag.Contains(keyword, StringComparison.OrdinalIgnoreCase));

                                            <span class="tag @(isHighlight ? "tag-highlight" : "")" data-toggle="tooltip" title="@tag">
                                                @tag
                                            </span>
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    </a>
                </div>
            }
        </div>

        <!-- Pagination -->
        <div class="row">
            <div class="col-md-12 pagination-container">
                @Html.PagedListPager(Model, page => Url.Action("Index", new
                    {
                        page,
                        ten = ViewBag.TenFilter,
                        khuVuc = ViewBag.KhuVucFilter,
                        dacDiem = ViewBag.DacDiemFilter
                    }), new PagedListRenderOptions
               {
                   LiElementClasses = new[] { "page-item" },
                   PageClasses = new[] { "page-link" },
                   UlElementClasses = new[] { "pagination", "justify-content-center" },
                   DisplayLinkToFirstPage = PagedListDisplayMode.IfNeeded,
                   DisplayLinkToLastPage = PagedListDisplayMode.IfNeeded,
                   MaximumPageNumbersToDisplay = 5
               })
            </div>
        </div>
    }
    else
    {
        <div class="empty-state">
            <i class="fas fa-user-times"></i>
            <h4>Không tìm thấy kết quả phù hợp</h4>
            <p class="text-muted">Hãy thử thay đổi tiêu chí tìm kiếm hoặc đăng bài nếu bạn đang tìm người thất lạc</p>
            @* <a href="@Url.Action("ThemNguoiCanTim", "TimNguoi")" class="btn btn-primary mt-3">
                <i class="fas fa-plus me-1"></i> Đăng bài tìm người
            </a> *@
        </div>
    }

@*  <div class="hotline-phone-ring">
        <div class="hotline-phone-ring-img-circle">
            <a class="nav-link text-light" asp-area="" asp-controller="TimNguoi" asp-action="ThemNguoiCanTim" asp-route-id="@Model"
            data-bs-toggle="tooltip" data-bs-placement="left" title="Đăng bài tìm người">
                <i class="fa-solid fa-file-signature"></i>
            </a>
        </div>
    </div> *@
</div>

@section Scripts {

    <script>
        function handleTinhThanhChange(tenTinh) {
            const options = document.querySelectorAll('#ListTinhThanh option');
            let matchedOption = Array.from(options).find(opt => opt.value === tenTinh);

            if (matchedOption) {
                // Gán ID vào hidden input
                document.getElementById('TinhThanhId').value = matchedOption.dataset.id;
                loadQuanHuyen(matchedOption.dataset.id);
            } else {
                document.getElementById('TinhThanhId').value = '';
                $("#QuanHuyen").empty().append('<option value="">Tất cả quận</option>');
            }
        }

            function handleTinhThanhChange(tenTinh) {
            const options = document.querySelectorAll('#ListTinhThanh option');
            let matchedOption = Array.from(options).find(opt => opt.value === tenTinh);

            if (matchedOption) {
                document.getElementById('TinhThanhId').value = matchedOption.dataset.id;
                loadQuanHuyen(matchedOption.dataset.id);
            } else {
                document.getElementById('TinhThanhId').value = '';
                $("#ListQuanHuyen").empty();
                document.getElementById('QuanHuyenId').value = '';
            }
        }

        function loadQuanHuyen(tinhThanhId) {
            const listQuanHuyen = $("#ListQuanHuyen");
            listQuanHuyen.empty();

            if (!tinhThanhId) return;

            $.getJSON(`/TimNguoi/GetQuanHuyenByTinhThanh?tinhThanhId=${tinhThanhId}`, function (data) {
                $.each(data, function (index, item) {
                    listQuanHuyen.append($('<option></option>').val(item.tenQuanHuyen).attr('data-id', item.id));
                });
            });
        }

        // Khi người dùng chọn quận/huyện, lấy ID tương ứng
        $('#QuanHuyenInput').on('input', function () {
            const val = this.value;
            const opts = document.getElementById('ListQuanHuyen').childNodes;
            let found = false;
            for (let i = 0; i < opts.length; i++) {
                if (opts[i].value === val) {
                    $('#QuanHuyenId').val(opts[i].getAttribute('data-id'));
                    found = true;
                    break;
                }
            }
            if (!found) {
                $('#QuanHuyenId').val('');
            }
        });

        $(document).ready(function () {
            const tinhThanhId = $("#TinhThanhId").val();
            if (tinhThanhId) {
                loadQuanHuyen(tinhThanhId);
            }
        });
    </script>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.1.3/js/bootstrap.bundle.min.js"></script>

    <script>
        // Hiển thị thông báo từ TempData
        $(document).ready(function() {
            // Khởi tạo tooltip
            $('[data-toggle="tooltip"]').tooltip();

        @if (ViewData["Warning"] != null)
        {
            <text>
                                showNotification('warning', '@Html.Raw(ViewData["Warning"])');
            </text>
        }
        });

        function showNotification(type, message) {
            const notificationArea = document.getElementById('notification-area');
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.innerHTML = `
                <i class="fas ${getIconForType(type)} me-2"></i>
                ${message}
            `;

            notificationArea.appendChild(notification);

            // Tự động xóa sau 5 giây
            setTimeout(() => {
                notification.remove();
            }, 5000);

            notification.addEventListener('click', () => {
                notification.remove();
            });

            // Chuyển trang nếu là thông báo đăng nhập
            if (type === 'warning' && message.includes('Bạn đang bị nghi ngờ phá hoại hệ thống. Cần Đăng Nhập Lại')) {
                setTimeout(() => {
                    window.location.href = '/Identity/Account/Login';
                }, 2000);
            }
        }

        function getIconForType(type) {
            switch(type) {
                case 'success': return 'fa-check-circle';
                case 'error': return 'fa-exclamation-circle';
                case 'warning': return 'fa-exclamation-triangle';
                case 'info': return 'fa-info-circle';
                default: return 'fa-bell';
            }
        }
    </script>

    <script>


        $(document).ready(function() {
            // Khởi tạo tooltip
            $('[data-toggle="tooltip"]').tooltip();

            // Highlight các tag khi click
            $('.tag').click(function() {
                var tagText = $(this).text().trim();
                var currentSearch = $('#dacDiem').val();

                if (currentSearch.includes(tagText)) {
                    // Nếu tag đã có trong search thì bỏ đi
                    var newSearch = currentSearch.split(',')
                        .map(item => item.trim())
                        .filter(item => item !== tagText)
                        .join(', ');
                } else {
                    // Nếu tag chưa có thì thêm vào
                    var newSearch = currentSearch ? currentSearch + ', ' + tagText : tagText;
                }

                $('#dacDiem').val(newSearch);
            });
        });
    </script>

  
}