@using System.Security.Claims;
@using WebTimNguoiThatLac.Data;
@model WebTimNguoiThatLac.ViewModels.ChatViewModel

@section Styles {
<style>
    /* Main chat container */
    .chat-container {
    display: flex;
    height: calc(100vh - 200px);
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    background: #fff;
    }

    /* Sidebar styling */
    .chat-sidebar {
    width: 350px;
    background: #f8f9fa;
    border-right: 1px solid #eaeaea;
    display: flex;
    flex-direction: column;
    }

    .chat-header {
    padding: 20px;
    background: #4e73df;
    color: white;
    font-size: 1.2rem;
    font-weight: 600;
    }

    .search-box {
    padding: 15px;
    background: #f1f3f5;
    }

    .search-box input {
    width: 100%;
    padding: 10px 15px;
    border-radius: 20px;
    border: 1px solid #ddd;
    background: white;
    }

    /* Conversation list */
    .conversation-list {
    flex: 1;
    overflow-y: auto;
    }

    .conversation-item {
    display: flex;
    padding: 15px;
    border-bottom: 1px solid #eee;
    text-decoration: none;
    color: #333;
    align-items: center;
    transition: all 0.3s ease;
    }

    .conversation-item:hover {
    background-color: #e9f5ff;
    }

    .conversation-item.active {
    background-color: #e9f5ff;
    border-left: 4px solid #4e73df;
    }

    /* Avatar styles */
    .avatar {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background-color: #4e73df;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 15px;
        font-weight: bold;
        font-size: 1.2rem;
        position: relative;
        overflow: hidden;
        border: 2px solid white;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
    }

    .avatar img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    /* Avatar status indicator */
    .avatar::after {
        content: '';
        position: absolute;
        bottom: 0;
        right: 0;
        width: 12px;
        height: 12px;
        border-radius: 50%;
        background-color: #28a745;
        border: 2px solid white;
        display: none;
    }

    .avatar.online::after {
        display: block;
    }

    /* Smaller avatar for messages */
    .message .avatar {
        width: 36px;
        height: 36px;
        font-size: 1rem;
        margin-right: 10px;
        flex-shrink: 0;
    }

    /* Avatar placeholder when no image */
    .avatar-placeholder {
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #4e73df 0%, #224abe 100%);
        color: white;
        font-weight: bold;
    }

    .info {
    flex: 1;
    min-width: 0;
    }

    .name {
    font-weight: 600;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    margin-bottom: 3px;
    }

    .preview {
    font-size: 0.9em;
    color: #777;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    }

    .time {
    font-size: 0.8em;
    color: #999;
    margin-left: 10px;
    white-space: nowrap;
    }

    /* Main chat area */
    .chat-main {
    flex: 1;
    display: flex;
    flex-direction: column;
    background: #f5f7fb;
    }

    .chat-main-header {
    padding: 15px 20px;
    background: white;
    border-bottom: 1px solid #eee;
    display: flex;
    align-items: center;
    }

    .chat-main-header .avatar {
    width: 40px;
    height: 40px;
    margin-right: 10px;
    }

    .message-container {
    flex: 1;
    padding: 20px;
    overflow-y: auto;
    background: #f5f7fb;
    background-image: url('data:image/svg+xml;utf8,<svg width="100" height="100" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"><path fill="%23e5e5e5" fill-opacity="0.2" d="M30 10L10 30v40l20 20h40l20-20V30L70 10H30z"/></svg>');
    background-size: 100px;
    }

    .message-container {
        overflow-y: auto; /* Cuộn nếu nội dung dài */
        padding: 10px;
    }
    .message {
    display: flex;
    margin-bottom: 15px;
    max-width: 70%;
    }

    .message.sent {
    margin-left: auto;
    justify-content: flex-end;
    }

    .message.received {
    margin-right: auto;
    justify-content: flex-start;
    }

    .message .content {
    padding: 12px 15px;
    border-radius: 18px;
    position: relative;
    word-wrap: break-word;
    }

    .message.sent .content {
    background-color: #4e73df;
    color: white;
    border-radius: 18px 18px 0 18px;
    }

    .message.received .content {
    background-color: white;
    color: #333;
    border-radius: 18px 18px 18px 0;
    box-shadow: 0 1px 1px rgba(0,0,0,0.1);
    }

    .message-image {
    max-width: 250px;
    max-height: 250px;
    border-radius: 12px;
    margin-bottom: 5px;
    cursor: pointer;
    transition: transform 0.3s;
    }

    .message-image:hover {
    transform: scale(1.03);
    }

    .message .time {
    font-size: 0.75em;
    color: rgba(255,255,255,0.7);
    margin-top: 5px;
    text-align: right;
    }

    .message.received .time {
    color: #999;
    }

    /* Chat input */
    .chat-input {
    padding: 15px;
    background: white;
    border-top: 1px solid #eee;
    }

    .input-group {
    display: flex;
    align-items: center;
    }

    .input-group input[type="text"] {
    flex: 1;
    padding: 12px 20px;
    border: 1px solid #ddd;
    border-radius: 30px;
    margin-right: 10px;
    font-size: 1rem;
    }

    .file-upload {
    padding: 10px 12px;
    cursor: pointer;
    color: #4e73df;
    font-size: 1.2rem;
    }

    .chat-input button {
    background: #4e73df;
    color: white;
    border: none;
    width: 45px;
    height: 45px;
    border-radius: 50%;
    cursor: pointer;
    transition: all 0.3s;
    }

    .chat-input button:hover {
    background: #3a5bbf;
    transform: scale(1.05);
    }

    /* Empty chat state */
    .empty-chat {
    flex: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    color: #777;
    text-align: center;
    padding: 40px;
    }

    .empty-chat .icon {
    font-size: 4rem;
    margin-bottom: 20px;
    color: #ddd;
    }

    .empty-chat p {
    font-size: 1.1rem;
    max-width: 300px;
    }

    /* Badge for admin */
    .badge-admin {
    background: #4e73df;
    color: white;
    font-size: 0.7rem;
    padding: 2px 8px;
    border-radius: 10px;
    margin-left: 5px;
    }

    /* Unread count badge */
    .unread-badge {
    background: #e74a3b;
    color: white;
    font-size: 0.7rem;
    padding: 2px 6px;
    border-radius: 50%;
    margin-left: auto;
    }




    .avatar:hover {
        transform: scale(1.05);
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }

        /* Pulse animation for online status */
    @@keyframes pulse {
        0%

        {
            transform: scale(1);
        }

        50% {
            transform: scale(1.1);
        }

        100% {
            transform: scale(1);
        }

    }

    .avatar.online::after {
        animation: pulse 2s infinite;
    }
    /* Thêm style mới cho xử lý nội dung dài */
    .message .text {
        white-space: pre-wrap; /* Cho phép xuống dòng tự động */
        word-break: break-word; /* Ngắt từ khi cần thiết */
        overflow-wrap: break-word; /* Đảm bảo nội dung không tràn */
    }

    /* Style cho preview hình ảnh */
    .file-preview-container {
        margin-top: 10px;
        border-radius: 8px;
        overflow: hidden;
        max-width: 250px;
        position: relative;
    }

    .file-preview {
        max-width: 100%;
        max-height: 200px;
        display: block;
    }

    .remove-file {
        position: absolute;
        top: 5px;
        right: 5px;
        background: rgba(0,0,0,0.5);
        color: white;
        border: none;
        border-radius: 50%;
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
    }

    /* Style cho trạng thái tin nhắn */
    .message-status {
        font-size: 0.75em;
        margin-top: 5px;
        display: flex;
        align-items: center;
        justify-content: flex-end;
    }

    .message.received .message-status {
        justify-content: flex-start;
    }

    .message-status .time {
        margin-right: 5px;
    }

    /* Style cho phần thông báo đã gửi/đồng bộ */
    .sync-notification {
        text-align: center;
        color: #666;
        font-size: 0.8em;
        margin: 10px 0;
        padding: 5px;
        background-color: #f5f5f5;
        border-radius: 4px;
    }

    /* Style cho nút chia sẻ vị trí */
    .location-btn {
        background: #4e73df;
        color: white;
        border: none;
        width: 45px;
        height: 45px;
        border-radius: 50%;
        cursor: pointer;
        transition: all 0.3s;
        margin-right: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .location-btn:hover {
        background: #3a5bbf;
        transform: scale(1.05);
    }
    /* END Style cho nút chia sẻ vị trí */



    /* test */
        
        /* Chat input container styles */
        .chat-input-container {
            padding: 12px 16px;
            background: #ffffff;
            border-top: 1px solid #e9ecef;
            box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.05);
        }

        /* File preview styles */
        .file-preview-wrapper {
            margin-bottom: 12px;
            position: relative;
        }

        .file-preview-container {
            position: relative;
            max-width: 200px;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        .file-preview {
            display: block;
            max-width: 100%;
            max-height: 150px;
            object-fit: contain;
        }

        .remove-file-btn {
            position: absolute;
            top: 8px;
            right: 8px;
            width: 24px;
            height: 24px;
            border-radius: 50%;
            background: rgba(0, 0, 0, 0.6);
            color: white;
            border: none;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s;
        }

            .remove-file-btn:hover {
                background: rgba(0, 0, 0, 0.8);
                transform: scale(1.1);
            }

        /* Main input area */
        .input-area {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .text-input-wrapper {
            flex: 1;
            position: relative;
        }

        #messageInput {
            width: 100%;
            padding: 12px 16px;
            border: none;
            border-radius: 24px;
            background: #f5f7fb;
            font-size: 15px;
            resize: none;
            outline: none;
            transition: all 0.3s;
            min-height: 48px;
            max-height: 120px;
            box-sizing: border-box;
        }

            #messageInput:focus {
                background: #e9eff7;
                box-shadow: 0 0 0 2px rgba(78, 115, 223, 0.2);
            }

        .input-underline {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: 2px;
            background: #4e73df;
            transform: scaleX(0);
            transition: transform 0.3s;
        }

        #messageInput:focus ~ .input-underline {
            transform: scaleX(1);
        }

        /* Action buttons */
        .action-buttons {
            display: flex;
            align-items: center;
            justify-content : center;
            gap: 4px;
        }

        .input-action-btn {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            border: none;
            background: transparent;
            color: #6c757d;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s;
        }

            .input-action-btn:hover {
                background: #f1f3f5;
                color: #4e73df;
            }

        .file-upload-btn { 
             position: relative; 
         }

        .send-btn {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            border: none;
            background: #4e73df;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s;
        }

            .send-btn:hover {
                background: #3a5bbf;
                transform: scale(1.05);
            }

            .send-btn:disabled {
                background: #b0c4ff;
                cursor: not-allowed;
            }

        /* Responsive adjustments */
        @@media (max-width: 768px) {
            .input-area {
                gap: 4px;
            }

            .input-action-btn {
                width: 36px;
                height: 36px;
            }

            .send-btn {
                width: 36px;
                height: 36px;
            }
        }
    
    /* end test */
</style>
    <style>
        /* Chat input container */
        .chat-input-container {
            padding: 12px 16px;
            background: #ffffff;
            border-top: 1px solid #e9ecef;
            box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.05);
        }

        /* File preview styles */
        .file-preview-wrapper {
            margin-bottom: 12px;
        }

        .file-preview-container {
            position: relative;
            max-width: 200px;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        .file-preview {
            display: block;
            max-width: 100%;
            max-height: 150px;
            object-fit: contain;
        }

        .remove-file-btn {
            position: absolute;
            top: 8px;
            right: 8px;
            width: 24px;
            height: 24px;
            border-radius: 50%;
            background: rgba(0, 0, 0, 0.6);
            color: white;
            border: none;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
        }

        /* Main input area with equal height elements */
        .input-area {
            display: flex;
            align-items: center;
            gap: 8px;
            height: 48px; /* Fixed height for the container */
        }

        .text-input-wrapper {
            flex: 1;
            height: 100%;
        }

        .message-input {
            width: 100%;
            height: 100%;
            padding: 0 16px;
            border: none;
            border-radius: 24px;
            background: #f5f7fb;
            font-size: 15px;
            outline: none;
            box-sizing: border-box;
        }

            .message-input:focus {
                background: #e9eff7;
                box-shadow: 0 0 0 2px rgba(78, 115, 223, 0.2);
            }

        /* Action buttons with equal height */
        .action-buttons {
            display: flex;
            align-items: center;
            gap: 4px;
            height: 100%;
        }

        .input-action-btn {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            border: none;
            background: transparent;
            color: #6c757d;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s;
            flex-shrink: 0;
        }

            .input-action-btn:hover {
                background: #f1f3f5;
                color: #4e73df;
            }

        .send-btn {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            border: none;
            background: #4e73df;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s;
            flex-shrink: 0;
        }

            .send-btn:hover {
                background: #3a5bbf;
            }

            .send-btn:disabled {
                background: #b0c4ff;
                cursor: not-allowed;
            }
    </style>
}
<!-- Notification Area -->
<div id="notification-area" style="position: fixed; top: 20px; right: 20px; z-index: 9999;"></div>




<div class="container-fluid px-4 py-4">
    <h1 class="mb-4" style="color: #4e73df;">TIN NHẮN</h1>

    <div class="chat-container">
        <!-- Sidebar - Danh sách hộp thoại -->
        <div class="chat-sidebar">
            <div class="chat-header">
                <i class="fas fa-comments me-2"></i> ĐOẠN CHAT
            </div>

            <div class="search-box">
                <input type="text" placeholder="Tìm kiếm cuộc trò chuyện...">
            </div>

            <div class="conversation-list">
                @foreach (var hopThoai in Model.HopThoais)
                {
                    var lastMessage = hopThoai.TinNhans.FirstOrDefault();
                    var otherUser = hopThoai.NguoiThamGias 
                    .FirstOrDefault(tv => tv.MaNguoiThamGia != User.FindFirstValue(ClaimTypes.NameIdentifier))?.ApplicationUser;
                    var unreadCount = hopThoai.TinNhans.Count(t => (t.IsRead==false)  && t.MaNguoiGui != User.FindFirstValue(ClaimTypes.NameIdentifier));

                    <a href="@Url.Action("Index", new { hopThoaiId = hopThoai.Id })"
                    class="conversation-item @(Model.HopThoaiHienTai?.Id == hopThoai.Id ? "active" : "")">
                        <div class="avatar @(otherUser?.Active == true ? "online" : "")">
                            @if (!string.IsNullOrEmpty(otherUser?.HinhAnh))
                            {
                                <img src="@Url.Content(otherUser.HinhAnh)" alt="@otherUser.UserName">
                            }
                            else
                            {
                                <div class="avatar-placeholder">
                                    @otherUser?.UserName?.Substring(0, 1).ToUpper()
                                </div>
                            }
                        </div>
                        <div class="info">
                            <div class="name">
                                @otherUser?.UserName
                                @if (otherUser?.Id == Model.AdminId)
                                {
                                    <span class="badge-admin">Admin</span>
                                }
                            </div>
                            <div class="preview">
                                @if (lastMessage != null)
                                {
                                    @if (!string.IsNullOrEmpty(lastMessage.HinhAnh))
                                    {
                                        <span><i class="fas fa-image"></i> Hình ảnh</span>
                                    }
                                    else
                                    {
                                        <span>@(lastMessage.NoiDung?.Length > 30 ? lastMessage.NoiDung.Substring(0, 30) + "..." : lastMessage.NoiDung)</span>
                                    }
                                }
                            </div>
                        </div>
                        <div class="time">
                            @if (lastMessage != null)
                            {
                                <span>@FormatTime(lastMessage.NgayGui)</span>
                            }
                        </div>
                        @if (unreadCount > 0)
                        {
                            <span class="unread-badge">@unreadCount</span>
                        }
                    </a>
                }
            </div>
        </div>

        <!-- Khu vực chat chính -->
        <div class="chat-main">
            @if (Model.HopThoaiHienTai != null)
            {
                var otherUser = Model.HopThoaiHienTai.NguoiThamGias
                .FirstOrDefault(tv => tv.MaNguoiThamGia != User.FindFirstValue(ClaimTypes.NameIdentifier))?.ApplicationUser;

                <div class="chat-main-header">
                    <div class="avatar @(otherUser?.Active == true ? "online" : "")">
                        @if (!string.IsNullOrEmpty(otherUser?.HinhAnh))
                        {
                            <img src="@Url.Content(otherUser.HinhAnh)" alt="@otherUser.UserName">
                        }
                        else
                        {
                            <div class="avatar-placeholder">
                                @otherUser?.UserName?.Substring(0, 1).ToUpper()
                            </div>
                        }
                    </div>
                    <div>
                        <h6 class="mb-0">@otherUser?.UserName</h6>
                        <small class="text-muted">
                            @if (otherUser?.Id == Model.AdminId)
                            {
                                <span class="badge-admin">Admin</span>
                            }
                            else
                            {
                                <span>Đang hoạt động</span>
                            }
                        </small>
                    </div>
                </div>

                <div class="message-container" id="messageContainer">
                    @{
                        DateTime? lastDate = null;
                    }
                    @foreach (var tinNhan in Model.HopThoaiHienTai.TinNhans.OrderBy(t => t.NgayGui))
                    {
                        // Hiển thị ngày nếu khác với tin nhắn trước đó
                        var currentDate = tinNhan.NgayGui.Date;
                        if (lastDate == null || currentDate != lastDate)
                        {
                            <div class="sync-notification">
                                @currentDate.ToString("dd/MM/yyyy")
                            </div>
                            lastDate = currentDate;
                        }
                        <div class="message @(tinNhan.MaNguoiGui == User.FindFirstValue(ClaimTypes.NameIdentifier) ? "sent" : "received")">
                            @if (tinNhan.MaNguoiGui != User.FindFirstValue(ClaimTypes.NameIdentifier))
                            {
                                <div class="avatar @(tinNhan.NguoiGuiTinNhan?.Active == true ? "online" : "")">
                                    @if (!string.IsNullOrEmpty(tinNhan.NguoiGuiTinNhan?.HinhAnh))
                                    {
                                        <img src="@Url.Content(otherUser.HinhAnh)" alt="@otherUser.UserName">
                                    }
                                    else
                                    {
                                        <div class="avatar-placeholder">
                                            @tinNhan.NguoiGuiTinNhan?.UserName?.Substring(0, 1).ToUpper()
                                        </div>
                                    }
                                </div>
                                
                            }

                            <div class="content">
                                @if (!string.IsNullOrEmpty(tinNhan.HinhAnh))
                                {
                                    <img src="@tinNhan.HinhAnh" class="message-image" alt="Hình ảnh">
                                }
                                <div class="text">@tinNhan.NoiDung</div>
                                <div class="message-status">
                                    <span class="time">@tinNhan.NgayGui.ToString("HH:mm")</span>
                                    @if (tinNhan.MaNguoiGui == User.FindFirstValue(ClaimTypes.NameIdentifier))
                                    {
                                        if (tinNhan.IsRead)
                                        {
                                            <span class="sync-status">✓✓ Đã xem</span>
                                        }
                                        else
                                        {
                                            <span class="sync-status">✓ Đã gửi</span>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                        
                    }
                </div>

               
                <div class="chat-input-container">
                    <form asp-action="GuiTinNhan" method="post" enctype="multipart/form-data" class="message-form" id="messageForm">
                        <input type="hidden" name="hopThoaiId" value="@Model.HopThoaiHienTai.Id">

                        <!-- File preview section -->
                        <div class="file-preview-wrapper" id="filePreviewContainer" style="display: none;">
                            <div class="file-preview-container">
                                <img id="filePreview" class="file-preview">
                                <button type="button" class="remove-file-btn" id="removeFileBtn">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>

                        <!-- Main input area -->
                        <div class="input-area">
                           

                            <!-- Text input with consistent height -->
                            <div class="text-input-wrapper">
                                <input type="text" name="noiDung" placeholder="Nhập tin nhắn..." id="messageInput"
                                       class="message-input" autocomplete="off" aria-label="Tin nhắn">
                            </div>

                            <!-- Action buttons with consistent height -->
                            <div class="action-buttons">
                                <!-- File upload button -->
                                <label class="input-action-btn file-upload-btn" title="Đính kèm hình ảnh">
                                    <i class="fas fa-image"></i>
                                    <input type="file" name="file" accept="image/*" id="fileInput" hidden>
                                </label>

                                <!-- Location sharing button -->
                                <button type="button" id="shareLocationBtn" class="input-action-btn location-btn"
                                        title="Chia sẻ vị trí">
                                    <i class="fas fa-map-marker-alt"></i>
                                </button>

                                <!-- Send button -->
                                <button type="submit" class="send-btn" id="sendButton" title="Gửi tin nhắn">
                                    <i class="fas fa-paper-plane"></i>
                                </button>
                            </div>
                        </div>
                    </form>
                </div>

            }
            else
            {
                <div class="empty-chat">
                    <div class="icon">
                        <i class="far fa-comment-dots"></i>
                    </div>
                    <h5>Chưa có cuộc trò chuyện nào</h5>
                    <p>Chọn một cuộc trò chuyện từ danh sách hoặc bắt đầu cuộc trò chuyện mới</p>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Tự động scroll xuống tin nhắn mới nhất
            var container = $('#messageContainer');
            if (container.length) {
                container.scrollTop(container[0].scrollHeight);
            }

            // Xử lý phóng to ảnh khi click
            $(document).on('click', '.message-image', function() {
                var src = $(this).attr('src');
                $('#imageModal').remove();
                $('body').append(`
                    <div id="imageModal" style="position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.8);z-index:9999;display:flex;justify-content:center;align-items:center;">
                        <img src="${src}" style="max-width:90%;max-height:90%;object-fit:contain;">
                        <button onclick="$('#imageModal').remove();" style="position:absolute;top:20px;right:20px;background:#fff;border:none;width:40px;height:40px;border-radius:50%;font-size:1.5rem;">×</button>
                    </div>
                `);
            });

            // Xử lý preview hình ảnh trước khi gửi
            $('#fileInput').change(function(e) {
                if (this.files && this.files[0]) {
                    var reader = new FileReader();
                    reader.onload = function(e) {
                        $('#filePreview').attr('src', e.target.result);
                        $('#filePreviewContainer').show();
                    }
                    reader.readAsDataURL(this.files[0]);
                }
            });

            // Xử lý xóa hình ảnh đã chọn
            $('#removeFileBtn').click(function() {
                $('#fileInput').val('');
                $('#filePreviewContainer').hide();
            });

            // Xử lý gửi tin nhắn với 
            $('#messageForm').submit(function(e) {
                var message = $('#messageInput').val();
                if (message.trim() === '' && $('#fileInput').val() === '') {
                    e.preventDefault();
                    return false;
                }
            });
        });

        // Hàm tự động điều chỉnh chiều cao ô nhập tin nhắn
        function adjustTextareaHeight() {
            var input = $('#messageInput');
            input.css('height', 'auto');
            input.css('height', input[0].scrollHeight + 'px');
        }

        // Gọi hàm khi nội dung thay đổi
        $('#messageInput').on('input', adjustTextareaHeight);
    </script>


    <script>
                // Xử lý chia sẻ vị trí
        $('#shareLocationBtn').click(function() {
            if (navigator.geolocation) {
                // Hiển thị thông báo đang lấy vị trí
                 showNotification('info', 'Đang Lấy Vị Trí');


                navigator.geolocation.getCurrentPosition(
                    function(position) {
                        // Tạo link Google Maps
                        var lat = position.coords.latitude;
                        var lng = position.coords.longitude;
                        var mapUrl = `https://www.google.com/maps?q=${lat},${lng}`;
                        var locationMessage = `Vị trí của tôi: ${mapUrl}`;

                        // Tự động điền vào ô tin nhắn
                        $('#messageInput').val(locationMessage);

                        // Focus vào ô tin nhắn để người dùng có thể gửi ngay
                        $('#messageInput').focus();

                          showNotification('success', 'Lấy Vị trí Thành Công');
                    },
                    function(error) {
                        var errorMessage;
                        switch(error.code) {
                            case error.PERMISSION_DENIED:
                                errorMessage = "Bạn đã từ chối chia sẻ vị trí.";
                                break;
                            case error.POSITION_UNAVAILABLE:
                                errorMessage = "Thông tin vị trí không khả dụng.";
                                break;
                            case error.TIMEOUT:
                                errorMessage = "Yêu cầu lấy vị trí đã hết thời gian.";
                                break;
                            case error.UNKNOWN_ERROR:
                                errorMessage = "Đã xảy ra lỗi không xác định.";
                                break;
                        }
                         showNotification('error', 'Lấy Vị Trí Không Thành Công: '+ errorMessage);
                    },
                    {
                        enableHighAccuracy: true,
                        timeout: 10000,
                        maximumAge: 0
                    }
                );
            } else {
                showNotification('error', 'Trình duyệt của bạn không hỗ trợ chia sẻ vị trí.');

            }
        });
    </script>
    @* test *@
    <script>
        // Enable/disable send button based on input
        document.getElementById('messageInput').addEventListener('input', function() {
            const sendBtn = document.getElementById('sendButton');
            sendBtn.disabled = this.value.trim() === '' &&
                              document.getElementById('fileInput').files.length === 0;
        });

        // File input handling
        document.getElementById('fileInput').addEventListener('change', function(e) {
            const previewContainer = document.getElementById('filePreviewContainer');
            const preview = document.getElementById('filePreview');
            const sendBtn = document.getElementById('sendButton');

            if (this.files && this.files[0]) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    preview.src = e.target.result;
                    previewContainer.style.display = 'block';
                    sendBtn.disabled = false;
                }
                reader.readAsDataURL(this.files[0]);
            }
        });

        // Remove file
        document.getElementById('removeFileBtn').addEventListener('click', function() {
            document.getElementById('fileInput').value = '';
            document.getElementById('filePreviewContainer').style.display = 'none';
            document.getElementById('sendButton').disabled =
                document.getElementById('messageInput').value.trim() === '';
        });
    </script>
    @* end test *@
}

@functions {
    string FormatTime(DateTime date)
    {
        var now = DateTime.Now;
        var diff = now - date;

        if (diff.TotalMinutes < 1)
        {
            return "Vừa xong";
        }
        else if (diff.TotalMinutes < 60)
        {
            return $"{(int)diff.TotalMinutes} phút trước";
        }
        else if (diff.TotalHours < 24)
        {
            return $"{(int)diff.TotalHours} giờ trước";
        }
        else if (diff.TotalDays < 7)
        {
            return $"{(int)diff.TotalDays} ngày trước";
        }
        else
        {
            return date.ToString("dd/MM/yyyy");
        }
    }
}